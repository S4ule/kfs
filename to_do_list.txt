
The following part is not mandatory, you are free to use any virtual manager you want to,
however, i suggest you to use KVM.
It’s a Kernel Virtual Manager, and have advanced execution and debugs functions.
All of the examples below will use KVM.

---------------------

- Install GRUB on an virtual image

- Write an ASM boot code that handles multiboot header, and use GRUB to init and
call main function of the kernel itself.

- Write basic kernel code of the choosen language.

- Compile it with correct flags, and link it to make it bootable.

- Once all of those steps above are done, you can write some helpers like kernel types
or basic functions (strlen, strcmp, ...)

- Your work must not exceed 10 MB.

- Code the interface between your kernel and the screen.

- Display "42" on the screen


---------------------


Your makefile must compile all your source files with the right flags and the right compiler. Keep in mind that your kernel will use at least two different languages (ASM and whatever-you-choose), so make (<- joke) your Makefile’s rules correctly.
After compilation, all the objects must be linked together in order to create the final Kernel binary (Cf. Linker part).s

In order to boot your kernel without any dependencies, you must compile your code with
the following flags (Adapt the flags for your language, those ones are a C++ example):
• -fno-builtin
• -fno-exception
• -fno-stack-protector
• -fno-rtti
• -nostdlib
• -nodefaultlibs

Pay attention to -nodefaultlibs and -nostdlib. Your Kernel will be compiled on a
host system, yes, but cannot be linked to any existing library on that host, otherwise it
will not be executed.


---------------------


You cannot use an existing linker in order to link your kernel. As written above, your
kernel will not boot. So, you must create a linker for your kernel.
Be carefull, you CAN use the ’ld’ binary available on your host, but you CANNOT use the
.ld file of your host.


---------------------


The i386 (x86) architecture is mandatory (you can thank me later).


---------------------


doc:

http://wiki.osdev.org/Expanded_Main_Page


---------------------


Bonus:

• Add scroll and cursor support to your I/O interface.
• Add colors support to your I/O interface.
• Add helpers like printf / printk in order to print information / debug easily.
• Handle keyboard entries and print them.
• Handle different screens, and keyboard shortcuts to switch easily between then.